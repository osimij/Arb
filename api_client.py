import aiohttp
import asyncio
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class WinAPIClient:
    """Client for interacting with the 1win API."""
    
    BASE_URL = "https://api.1win.win/v1/client"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {
            "X-API-KEY": api_key,
            "Content-Type": "application/json"
        }
    
    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """Make an HTTP request to the API."""
        url = f"{self.BASE_URL}/{endpoint}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    # Log the request for debugging
                    logger.info(f"API Request: {method} {url} - Status: {response.status}")
                    
                    try:
                        response_data = await response.json()
                    except:
                        # If JSON parsing fails, get text response
                        response_text = await response.text()
                        logger.error(f"Failed to parse JSON response: {response_text}")
                        return {"success": False, "error": f"Invalid JSON response: {response_text}", "status": response.status}
                    
                    # Success statuses: 200 (OK) and 201 (Created)
                    if response.status in [200, 201]:
                        return {"success": True, "data": response_data}
                    else:
                        return {
                            "success": False,
                            "error": response_data,
                            "status": response.status
                        }
        
        except aiohttp.ClientError as e:
            logger.error(f"HTTP request failed: {e}")
            return {"success": False, "error": f"Network error: {str(e)}"}
        except asyncio.TimeoutError:
            logger.error("Request timed out")
            return {"success": False, "error": "Request timed out"}
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return {"success": False, "error": f"Unexpected error: {str(e)}"}
    
    def _parse_error_message(self, error_data: dict, status: int) -> str:
        """Parse specific error codes from the API with user-friendly Russian descriptions."""
        error_code = error_data.get('errorCode', '')
        error_message = error_data.get('errorMessage', '')
        
        # Handle specific error codes with intuitive Russian explanations
        if status == 400:
            if 'amount exceeds' in error_message.lower() or 'limit' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-01: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—É–º–º–æ–π –¥–µ–ø–æ–∑–∏—Ç–∞**\n\n"
                    "üîç **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                    "‚Ä¢ –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "‚Ä¢ –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É)\n"
                    "‚Ä¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç—ã\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 100 –¥–æ 50000)\n"
                    "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –ª–∏–º–∏—Ç—ã\n"
                    "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"
                )
            elif 'deposit already created' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-02: –î–µ–ø–æ–∑–∏—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω**\n\n"
                    "‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–µ–ø–æ–∑–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "‚Ä¢ –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –∑–∞–≤–∏—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
            elif 'fee is too high' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-03: –ö–æ–º–∏—Å—Å–∏—è —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è**\n\n"
                    "‚ÑπÔ∏è –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —ç—Ç–æ—Ç –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–µ–¥–µ–ª—ã.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É\n"
                    "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∏—Å—Å–∏–∏"
                )
            elif 'withdrawal is being processed' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-04: –í—ã–≤–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è**\n\n"
                    "‚ÑπÔ∏è –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–≤–æ–¥–∞\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "‚Ä¢ –ï—Å–ª–∏ –≤—ã–≤–æ–¥ –∑–∞–≤–∏—Å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
            elif 'incorrect code' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-05: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è**\n\n"
                    "‚ÑπÔ∏è –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –Ω–µ –∏—Å—Ç–µ–∫\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥"
                )
            elif 'withdrawal amount exceeds available cash balance' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-06: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞—Å—Å–µ**\n\n"
                    "‚ÑπÔ∏è –í –∫–∞—Å—Å–µ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Å—Å—ã\n"
                    "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à—É—é —Å—É–º–º—É\n"
                    "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Å—Å—ã"
                )
            elif 'invalid cash desk identifier' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-07: –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞—Å—Å–æ–π**\n\n"
                    "‚ÑπÔ∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Å—Å—ã –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∫–∞—Å—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                    "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞—Å—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
                )
            else:
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #400-00: –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö**\n\n"
                    "‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    "üí° **–ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:**\n"
                    "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)\n"
                    "‚Ä¢ –°—É–º–º–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º)\n"
                    "‚Ä¢ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–¥–ª—è –≤—ã–≤–æ–¥–∞)\n\n"
                    "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã–µ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        
        elif status == 403:
            return (
                "‚ùå **–û—à–∏–±–∫–∞ #403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω**\n\n"
                "‚ÑπÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–∏—Å—Ç–µ–º–µ 1win.\n\n"
                "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                "‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, API –∫–ª—é—á –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"
            )
        
        elif status == 404:
            if error_code == 'CASH02' or 'withdrawal not found' in error_message.lower():
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #404-01: –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                    "‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ 1win\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                )
            else:
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #404-02: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                    "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ 1win.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ 1win"
                )
        
        elif status == 429:
            if error_code == 'CASH06' or 'TooManyRequests' in error_message:
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #429-01: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n"
                    "‚ÑπÔ∏è –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                    "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                    "‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\n"
                    "‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ\n"
                    "‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                )
            else:
                return (
                    "‚ùå **–û—à–∏–±–∫–∞ #429-02: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤**\n\n"
                    "‚ÑπÔ∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è.\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                )
        
        elif status == 500:
            return (
                "‚ùå **–û—à–∏–±–∫–∞ #500: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ 1win**\n\n"
                "‚ÑπÔ∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞ 1win.\n\n"
                "üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä 1win –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            )
        
        else:
            return (
                f"‚ùå **–û—à–∏–±–∫–∞ #{status}: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞**\n\n"
                f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
                f"üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
                f"‚Ä¢ –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ\n"
                f"‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –æ—à–∏–±–∫–∏: {status}\n\n"
                f"**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {error_message or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
            )
    
    async def create_deposit(self, user_id: int, amount: float) -> Dict[str, Any]:
        """Create a deposit for a user."""
        data = {
            "userId": user_id,
            "amount": amount
        }
        
        result = await self._make_request("POST", "deposit", data)
        
        if not result["success"]:
            error_message = self._parse_error_message(result.get("error", {}), result.get("status", 0))
            return {"success": False, "message": error_message}
        
        # Success case
        deposit_data = result["data"]
        return {
            "success": True,
            "message": f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                      f"üÜî ID –¥–µ–ø–æ–∑–∏—Ç–∞: {deposit_data.get('id')}\n"
                      f"üí∞ –°—É–º–º–∞: {deposit_data.get('amount')}\n"
                      f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {deposit_data.get('userId')}\n"
                      f"üè¶ ID –∫–∞—Å—Å—ã: {deposit_data.get('cashId')}"
        }
    
    async def process_withdrawal(self, user_id: int, code: int) -> Dict[str, Any]:
        """Process a withdrawal for a user with verification code."""
        data = {
            "userId": user_id,
            "code": code
        }
        
        result = await self._make_request("POST", "withdrawal", data)
        
        if not result["success"]:
            error_message = self._parse_error_message(result.get("error", {}), result.get("status", 0))
            return {"success": False, "message": error_message}
        
        # Success case
        withdrawal_data = result["data"]
        return {
            "success": True,
            "message": f"‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                      f"üÜî ID –≤—ã–≤–æ–¥–∞: {withdrawal_data.get('id')}\n"
                      f"üí∞ –°—É–º–º–∞: {withdrawal_data.get('amount')}\n"
                      f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {withdrawal_data.get('userId')}\n"
                      f"üè¶ ID –∫–∞—Å—Å—ã: {withdrawal_data.get('cashId')}"
        }