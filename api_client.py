import aiohttp
import asyncio
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class WinAPIClient:
    """Client for interacting with the 1win API."""
    
    BASE_URL = "https://api.1win.win/v1/client"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {
            "X-API-KEY": api_key,
            "Content-Type": "application/json"
        }
    
    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """Make an HTTP request to the API."""
        url = f"{self.BASE_URL}/{endpoint}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    response_data = await response.json()
                    
                    if response.status == 200:
                        return {"success": True, "data": response_data}
                    else:
                        return {
                            "success": False,
                            "error": response_data,
                            "status": response.status
                        }
        
        except aiohttp.ClientError as e:
            logger.error(f"HTTP request failed: {e}")
            return {"success": False, "error": f"Network error: {str(e)}"}
        except asyncio.TimeoutError:
            logger.error("Request timed out")
            return {"success": False, "error": "Request timed out"}
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return {"success": False, "error": f"Unexpected error: {str(e)}"}
    
    async def create_deposit(self, user_id: int, amount: float) -> Dict[str, Any]:
        """Create a deposit for a user."""
        data = {
            "userId": user_id,
            "amount": amount
        }
        
        result = await self._make_request("POST", "deposit", data)
        
        if not result["success"]:
            # Handle specific error cases
            if result.get("status") == 400:
                error_msg = result.get("error", {})
                if "Amount exceeds limits" in str(error_msg):
                    return {"success": False, "message": "‚ùå –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã"}
                elif "Deposit already created" in str(error_msg):
                    return {"success": False, "message": "‚ùå –î–µ–ø–æ–∑–∏—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
                elif "Deposit fee is too high" in str(error_msg):
                    return {"success": False, "message": "‚ùå –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –¥–µ–ø–æ–∑–∏—Ç —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞"}
                else:
                    return {"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"}
            elif result.get("status") == 403:
                return {"success": False, "message": "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á"}
            elif result.get("status") == 404:
                return {"success": False, "message": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            else:
                return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('error', 'Unknown error')}"}
        
        # Success case
        deposit_data = result["data"]
        return {
            "success": True,
            "message": f"‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                      f"üÜî ID –¥–µ–ø–æ–∑–∏—Ç–∞: {deposit_data.get('id')}\n"
                      f"üí∞ –°—É–º–º–∞: {deposit_data.get('amount')}\n"
                      f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {deposit_data.get('userId')}\n"
                      f"üè¶ ID –∫–∞—Å—Å—ã: {deposit_data.get('cashId')}"
        }
    
    async def process_withdrawal(self, user_id: int, code: int) -> Dict[str, Any]:
        """Process a withdrawal for a user with verification code."""
        data = {
            "userId": user_id,
            "code": code
        }
        
        result = await self._make_request("POST", "withdrawal", data)
        
        if not result["success"]:
            # Handle specific error cases
            if result.get("status") == 400:
                error_msg = result.get("error", {})
                if "Withdrawal is being processed" in str(error_msg):
                    return {"success": False, "message": "‚ùå –í—ã–≤–æ–¥—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è"}
                elif "Amount exceeds limits" in str(error_msg):
                    return {"success": False, "message": "‚ùå –°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã"}
                elif "Invalid cash desk identifier" in str(error_msg):
                    return {"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Å—Å—ã"}
                elif "Incorrect code" in str(error_msg):
                    return {"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥"}
                elif "Withdrawal amount exceeds available cash balance" in str(error_msg):
                    return {"success": False, "message": "‚ùå –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã"}
                else:
                    return {"success": False, "message": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞"}
            elif result.get("status") == 403:
                return {"success": False, "message": "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á"}
            elif result.get("status") == 404:
                error_msg = result.get("error", {})
                if "Withdrawal not found" in str(error_msg):
                    return {"success": False, "message": "‚ùå –í—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                elif "User not found" in str(error_msg):
                    return {"success": False, "message": "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
                else:
                    return {"success": False, "message": "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            else:
                return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ API: {result.get('error', 'Unknown error')}"}
        
        # Success case
        withdrawal_data = result["data"]
        return {
            "success": True,
            "message": f"‚úÖ –í—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                      f"üÜî ID –≤—ã–≤–æ–¥–∞: {withdrawal_data.get('id')}\n"
                      f"üí∞ –°—É–º–º–∞: {withdrawal_data.get('amount')}\n"
                      f"üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {withdrawal_data.get('userId')}\n"
                      f"üè¶ ID –∫–∞—Å—Å—ã: {withdrawal_data.get('cashId')}"
        }