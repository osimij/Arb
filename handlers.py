from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import database as db
from config import ADMIN_ID

# --- Main Keyboard ---
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("–í—ã–≤–æ–¥")],
        [KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"), KeyboardButton("–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- User Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–∞—à–µ–π –∫–∞—Å—Å—ã 1win!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —Å—á—ë—Ç –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "‚úÖ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏\n"
        "‚úÖ –ë—ã—Å—Ç—Ä–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        "‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏\n\n"
        "üí¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7 ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n"
        "üéÅ –ë–æ–Ω—É—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å!\n\n"
        "---"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles text messages from the reply keyboard."""
    text = update.message.text

    if text in ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å", "–í—ã–≤–æ–¥"]:
        manager = db.get_next_manager()
        if manager:
            manager_url = f"https://t.me/{manager}"
            inline_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=manager_url)]
            ])
            await update.message.reply_text(
                text="–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                reply_markup=inline_keyboard,
            )
        else:
            await update.message.reply_text(
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
    elif text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7":
        # You can replace this with your actual support username
        support_url = "https://t.me/your_support_username"
        await update.message.reply_text(
            f"–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: {support_url}"
        )
    elif text == "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª":
        news_channel_url = "https://t.me/placeholder_channel"
        await update.message.reply_text(
            f"üì¢ –ù–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {news_channel_url}"
        )

# This handler is no longer used by the main keyboard but might be used elsewhere.
# If not, it can be removed. For now, I'll leave it but its logic is replaced by handle_text
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # It's good practice to answer all callbacks
    # The old logic is now in handle_text
    await query.edit_message_text(text="This action is now handled by the main keyboard buttons.")

# --- Admin Handlers ---
def is_admin(update: Update) -> bool:
    """Check if the user sending the command is the admin."""
    return update.effective_user.id == ADMIN_ID

async def add_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞. \n–ü—Ä–∏–º–µ—Ä: /addmanager @newmanager")
        return

    username = context.args[0]
    if username.startswith('@'):
        username = username[1:]

    if db.add_manager(username):
        await update.message.reply_text(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.")

async def delete_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: /delmanager @oldmanager")
        return

    username = context.args[0]
    if username.startswith('@'):
        username = username[1:]

    if db.delete_manager(username):
        await update.message.reply_text(f"üóëÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

async def list_managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    managers = db.get_all_managers()
    if not managers:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    message_text = "*–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:*\n\n"
    message_text += "\n".join([f"‚Ä¢ `@{manager}`" for manager in managers])

    await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2) 