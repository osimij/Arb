from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
import database as db
from config import ADMIN_IDS, API_KEY
from api_client import WinAPIClient
import logging

logger = logging.getLogger(__name__)

# Conversation states
WAITING_FOR_MANAGER_USERNAME = 1
WAITING_FOR_DELETE_USERNAME = 2
WAITING_FOR_MANAGER_MESSAGE = 3

# --- Main Keyboard ---
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("–í—ã–≤–æ–¥")],
        [KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"), KeyboardButton("–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- User Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–∞—à–µ–π –∫–∞—Å—Å—ã 1win!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —Å—á—ë—Ç –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
        "‚úÖ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏\n"
        "‚úÖ –ë—ã—Å—Ç—Ä–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        "‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏\n\n"
        "üí¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7 ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n"
        "üéÅ –ë–æ–Ω—É—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å!\n\n"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handles text messages from the reply keyboard."""
    text = update.message.text

    if text in ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å", "–í—ã–≤–æ–¥"]:
        manager = db.get_next_manager()
        if manager:
            manager_url = f"https://t.me/{manager}"
            inline_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url=manager_url)]
            ])
            await update.message.reply_text(
                text="–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—é –≤–∞—Å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
                reply_markup=inline_keyboard,
            )
        else:
            await update.message.reply_text(
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            )
    elif text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7":
        # You can replace this with your actual support username
        support_url = "https://t.me/your_support_username"
        await update.message.reply_text(
            f"–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: {support_url}"
        )
    elif text == "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª":
        news_channel_url = "https://t.me/gpkassa1win_tj"
        await update.message.reply_text(
            f"üì¢ –ù–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª: {news_channel_url}"
        )

# This handler is no longer used by the main keyboard but might be used elsewhere.
# If not, it can be removed. For now, I'll leave it but its logic is replaced by handle_text
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # It's good practice to answer all callbacks
    # The old logic is now in handle_text
    await query.edit_message_text(text="This action is now handled by the main keyboard buttons.")

# --- Admin Handlers ---
def is_admin(update: Update) -> bool:
    """Check if the user sending the command is an admin."""
    return update.effective_user.id in ADMIN_IDS

async def add_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    await update.message.reply_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å @ –∏–ª–∏ –±–µ–∑):")
    return WAITING_FOR_MANAGER_USERNAME

async def receive_manager_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if username.startswith('@'):
        username = username[1:]

    # Store the username temporarily
    context.user_data['pending_manager_username'] = username
    
    # Check if manager already exists
    if username in db.get_all_managers():
        await update.message.reply_text(
            f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_FOR_MANAGER_USERNAME
    
    await update.message.reply_text(
        f"üìù –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @{username} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –±–æ—Ç.\n\n"
        f"‚ö†Ô∏è –í–∞–∂–Ω–æ: –º–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –°–ï–ô–ß–ê–°, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã.\n\n"
        f"–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ @{username} –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É, —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."
    )
    return WAITING_FOR_MANAGER_MESSAGE

async def receive_manager_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Wait for the manager to send a message to capture their user ID."""
    manager_user_id = update.effective_user.id
    manager_username = update.effective_user.username
    pending_username = context.user_data.get('pending_manager_username')
    
    if not manager_username:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return WAITING_FOR_MANAGER_MESSAGE
    
    # Remove @ if present
    if manager_username.startswith('@'):
        manager_username = manager_username[1:]
    
    # Check if this is the expected manager
    if manager_username.lower() != pending_username.lower():
        await update.message.reply_text(
            f"‚ùå –û–∂–∏–¥–∞–ª—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä @{pending_username}, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç @{manager_username}.\n\n"
            f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ @{pending_username} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç."
        )
        return WAITING_FOR_MANAGER_MESSAGE
    
    # Add manager with user ID
    if db.add_manager(manager_username, manager_user_id):
        # Set commands for this manager
        try:
            from telegram import BotCommand, BotCommandScopeChat
            manager_commands = [
                BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                BotCommand("deposit", "–°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                BotCommand("withdrawal", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            ]
            await context.bot.set_my_commands(
                manager_commands, 
                scope=BotCommandScopeChat(chat_id=manager_user_id)
            )
            
            await update.message.reply_text(
                f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{manager_username}!\n\n"
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º:\n"
                f"‚Ä¢ /deposit - —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç\n"
                f"‚Ä¢ /withdrawal - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥\n\n"
                f"–ö–æ–º–∞–Ω–¥—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –≤–∞—à–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."
            )
            
            # Notify the admin who added the manager
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @{manager_username} (ID: {manager_user_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!"
                    )
                except:
                    pass  # Admin might have blocked the bot
            
            return ConversationHandler.END
            
        except Exception as e:
            logger.error(f"Error setting commands for manager {manager_username}: {e}")
            await update.message.reply_text(
                f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @{manager_username} –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @{manager_username}.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ."
        )
        return ConversationHandler.END

async def delete_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    await update.message.reply_text("üóëÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å @ –∏–ª–∏ –±–µ–∑):")
    return WAITING_FOR_DELETE_USERNAME

async def receive_delete_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if username.startswith('@'):
        username = username[1:]

    if db.delete_manager(username):
        await update.message.reply_text(f"üóëÔ∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_FOR_DELETE_USERNAME

async def migrate_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Allow existing managers to register their user ID"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not username:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
        )
        return
    
    # Remove @ if present
    if username.startswith('@'):
        username = username[1:]
    
    # Check if this username exists in managers but without user_id
    all_managers = db.get_all_managers()
    managers_with_ids = [m[0] for m in db.get_all_managers_with_ids()]
    
    if username in all_managers and username not in managers_with_ids:
        # Update the manager with user_id
        if db.update_manager_user_id(username, user_id):
            # Set commands for this manager
            try:
                from telegram import BotCommand, BotCommandScopeChat
                manager_commands = [
                    BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
                    BotCommand("deposit", "–°–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                    BotCommand("withdrawal", "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
                ]
                await context.bot.set_my_commands(
                    manager_commands, 
                    scope=BotCommandScopeChat(chat_id=user_id)
                )
                
                await update.message.reply_text(
                    f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n"
                    f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–∞–º:\n"
                    f"‚Ä¢ /deposit - —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç\n"
                    f"‚Ä¢ /withdrawal - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥\n\n"
                    f"–ö–æ–º–∞–Ω–¥—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –≤–∞—à–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥."
                )
                
                # Notify admins
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} (ID: {user_id}) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!"
                        )
                    except:
                        pass
            except Exception as e:
                logger.error(f"Error setting commands for manager {username}: {e}")
                await update.message.reply_text(
                    f"‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥.\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.")
    elif username in managers_with_ids:
        await update.message.reply_text("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    else:
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫."
        )

async def list_managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    managers = db.get_all_managers()
    if not managers:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    message_text = "*–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:*\n\n"
    message_text += "\n".join([f"‚Ä¢ `@{manager}`" for manager in managers])

    await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2)

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


# --- Manager API Commands ---
def is_manager(username: str = None, user_id: int = None) -> bool:
    """Check if the user is a manager by username or user_id."""
    if user_id:
        # Check by user_id first (more reliable)
        return db.is_manager_by_user_id(user_id) is not None
    elif username:
        # Fallback to username check
        managers = db.get_all_managers()
        return username in managers
    return False


async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /deposit command for managers."""
    username = update.effective_user.username
    user_id_telegram = update.effective_user.id
    
    # Log the command attempt
    logger.info(f"Deposit command attempted by user: {username} (ID: {user_id_telegram})")
    
    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not is_manager(username=username, user_id=user_id_telegram):
        managers_list = db.get_all_managers()
        logger.warning(f"User {username} (ID: {user_id_telegram}) not found in managers list. Current managers: {managers_list}")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/deposit <user_id> <amount>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/deposit 123456 1000`\n\n"
            "user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ 1win\n"
            "amount - —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        user_id = int(context.args[0])
        amount = float(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, —Å—É–º–º–∞ - —á–∏—Å–ª–æ–º.")
        return
    
    # Show processing message
    processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–µ–ø–æ–∑–∏—Ç...")
    
    # Log the API call attempt
    logger.info(f"Making API call for deposit: user_id={user_id}, amount={amount}, api_key={'*' * 10 + API_KEY[-10:] if API_KEY else 'NOT_SET'}")
    
    # Make API call
    try:
        client = WinAPIClient(API_KEY)
        result = await client.create_deposit(user_id, amount)
        
        # Update message with result
        await processing_msg.edit_text(result["message"])
        
        # Log the transaction
        logger.info(f"Deposit request by {username}: user_id={user_id}, amount={amount}, success={result['success']}")
        
    except Exception as e:
        logger.error(f"Error in deposit command: {e}")
        await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞: {str(e)}")


async def withdrawal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /withdrawal command for managers."""
    username = update.effective_user.username
    user_id_telegram = update.effective_user.id
    
    # Log the command attempt
    logger.info(f"Withdrawal command attempted by user: {username} (ID: {user_id_telegram})")
    
    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not is_manager(username=username, user_id=user_id_telegram):
        managers_list = db.get_all_managers()
        logger.warning(f"User {username} (ID: {user_id_telegram}) not found in managers list. Current managers: {managers_list}")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/withdrawal <user_id> <code>`\n"
            "–ü—Ä–∏–º–µ—Ä: `/withdrawal 123456 1234`\n\n"
            "user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ 1win\n"
            "code - –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        user_id = int(context.args[0])
        code = int(context.args[1])
        
        if code < 0:
            await update.message.reply_text("‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return
    
    # Show processing message
    processing_msg = await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—ã–≤–æ–¥...")
    
    # Log the API call attempt
    logger.info(f"Making API call for withdrawal: user_id={user_id}, code={code}, api_key={'*' * 10 + API_KEY[-10:] if API_KEY else 'NOT_SET'}")
    
    # Make API call
    try:
        client = WinAPIClient(API_KEY)
        result = await client.process_withdrawal(user_id, code)
        
        # Update message with result
        await processing_msg.edit_text(result["message"])
        
        # Log the transaction
        logger.info(f"Withdrawal request by {username}: user_id={user_id}, code={code}, success={result['success']}")
        
    except Exception as e:
        logger.error(f"Error in withdrawal command: {e}")
        await processing_msg.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞: {str(e)}")


 
