from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
import database as db
from config import ADMIN_IDS, API_KEY
from api_client import WinAPIClient
import logging

logger = logging.getLogger(__name__)

# Conversation states
WAITING_FOR_MANAGER_USERNAME = 1
WAITING_FOR_DELETE_USERNAME = 2

# --- Main Keyboard ---
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å"), KeyboardButton("–í—ã–≤–æ–¥")],
        [KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"), KeyboardButton("–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# --- Helper Functions ---
def is_admin(update):
    return update.effective_user.id in ADMIN_IDS

# --- Command Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    username = user.username or "Unknown"
    
    # Check if user is a manager
    if is_manager(username=username, user_id=user.id):
        # Manager welcome message
        await update.message.reply_text(
            f"üîß **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω–µ–¥–∂–µ—Ä {username}!**\n\n"
            f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            f"‚Ä¢ `/deposit <user_id> <amount>` - —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç\n"
            f"‚Ä¢ `/withdrawal <user_id> <code>` - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥\n\n"
            f"üí° **–í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ä–∞–∑—É, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!**",
            reply_markup=get_main_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # Regular user welcome message - restored original detailed version
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –Ω–∞—à–µ–π –∫–∞—Å—Å—ã 1win!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚úÖ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —Å—á—ë—Ç –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫\n"
            "‚úÖ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏\n"
            "‚úÖ –ë—ã—Å—Ç—Ä–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
            "‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –∏ –∞–∫—Ü–∏—è–º–∏\n\n"
            "üí¨ –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º 24/7 ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!\n"
            "üéÅ –ë–æ–Ω—É—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–∂–µ –∂–¥—ë—Ç –≤–∞—Å!",
            reply_markup=get_main_keyboard()
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å":
        await update.message.reply_text(
            "üí∞ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**\n\n"
            "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n"
            "@manager_username\n\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—á–µ—Ç–∞!",
            parse_mode=ParseMode.MARKDOWN
        )
    elif text == "–í—ã–≤–æ–¥":
        await update.message.reply_text(
            "üí∏ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**\n\n"
            "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n"
            "@manager_username\n\n"
            "–ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!",
            parse_mode=ParseMode.MARKDOWN
        )
    elif text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7":
        await update.message.reply_text(
            "üÜò **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
            "–ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!\n"
            "–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @support_username",
            parse_mode=ParseMode.MARKDOWN
        )
    elif text == "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª":
        await update.message.reply_text(
            "üì¢ **–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è**\n\n"
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
            "@news_channel\n\n"
            "–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–∫—Ü–∏–∏!",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )

# This handler is no longer used by the main keyboard but might be used elsewhere.
# If not, it can be removed. For now, I'll leave it but its logic is replaced by handle_text
async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # It's good practice to answer all callbacks
    # The old logic is now in handle_text
    await query.edit_message_text(text="This action is now handled by the main keyboard buttons.")

# --- Admin Handlers ---
async def add_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    await update.message.reply_text("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Å @ –∏–ª–∏ –±–µ–∑):")
    return WAITING_FOR_MANAGER_USERNAME

async def receive_manager_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if username.startswith('@'):
        username = username[1:]

    # Check if manager already exists
    if username in db.get_all_managers():
        await update.message.reply_text(
            f"‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_FOR_MANAGER_USERNAME
    
    # Automatically add manager without requiring them to message first
    if db.add_manager(username):
        await update.message.reply_text(
            f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–¢–µ–ø–µ—Ä—å @{username} –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /deposit <user_id> <amount> - —Å–æ–∑–¥–∞—Ç—å –¥–µ–ø–æ–∑–∏—Ç\n"
            f"‚Ä¢ /withdrawal <user_id> <code> - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–≤–æ–¥\n\n"
            f"üí° –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ä–∞–∑—É, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!"
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ @{username}.\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ."
        )
        return ConversationHandler.END

async def delete_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    await update.message.reply_text("üóëÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Å @ –∏–ª–∏ –±–µ–∑):")
    return WAITING_FOR_DELETE_USERNAME

async def receive_delete_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip()
    if username.startswith('@'):
        username = username[1:]

    if db.delete_manager(username):
        await update.message.reply_text(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        await update.message.reply_text(f"‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
    
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def list_managers_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    managers = db.get_all_managers()
    if not managers:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    message_text = "*–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:*\n\n"
    message_text += "\n".join([f"‚Ä¢ `@{manager}`" for manager in managers])

    await update.message.reply_text(message_text, parse_mode=ParseMode.MARKDOWN_V2)


# --- Manager API Commands ---
def is_manager(username: str = None, user_id: int = None) -> bool:
    """Check if the user is a manager by username."""
    if username:
        # Remove @ if present
        if username.startswith('@'):
            username = username[1:]
        managers = db.get_all_managers()
        return username in managers
    return False


async def deposit_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /deposit command for managers."""
    username = update.effective_user.username
    user_id_telegram = update.effective_user.id
    
    # Log the command attempt
    logger.info(f"Deposit command attempted by user: {username} (ID: {user_id_telegram})")
    
    if not username:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üí° –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return
    
    if not is_manager(username=username, user_id=user_id_telegram):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."
        )
        return
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "**–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/deposit <user_id> <amount>`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "`/deposit 123456 1000` - –¥–µ–ø–æ–∑–∏—Ç 1000 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456\n"
            "`/deposit 789012 500.50` - –¥–µ–ø–æ–∑–∏—Ç 500.50 –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 789012\n\n"
            "**–ì–¥–µ –≤–∑—è—Ç—å user_id:**\n"
            "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ 1win\n"
            "‚Ä¢ –û–±—ã—á–Ω–æ —ç—Ç–æ 6-10 —Ü–∏—Ñ—Ä\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ ID –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ 1win",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        user_id = int(context.args[0])
        amount = float(context.args[1])
        
        if amount <= 0:
            await update.message.reply_text(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/deposit 123456 1000`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        if amount > 1000000:  # 1 million limit for safety
            await update.message.reply_text(
                "‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞!\n\n"
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 1,000,000\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à—É—é —Å—É–º–º—É."
            )
            return
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n\n"
            "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n"
            "‚Ä¢ user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456)\n"
            "‚Ä¢ amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 500.50)\n\n"
            "**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä:**\n"
            "`/deposit 123456 1000`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # Show processing message
    processing_msg = await update.message.reply_text(
        f"‚è≥ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–µ–ø–æ–∑–∏—Ç...**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
        f"üí∞ –°—É–º–º–∞: `{amount}`\n"
        f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ 1win...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Log the API call attempt
    logger.info(f"Making API call for deposit: user_id={user_id}, amount={amount}")
    
    # Make API call
    try:
        client = WinAPIClient(API_KEY)
        result = await client.create_deposit(user_id, amount)
        
        # Update message with result
        await processing_msg.edit_text(result["message"], parse_mode=ParseMode.MARKDOWN)
        
        # Log the transaction
        logger.info(f"Deposit request by {username}: user_id={user_id}, amount={amount}, success={result['success']}")
        
    except Exception as e:
        logger.error(f"Error in deposit command: {e}")
        await processing_msg.edit_text(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–ø–æ–∑–∏—Ç–∞**\n\n"
            f"**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            f"`{str(e)}`\n\n"
            f"üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö\n"
            f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è",
            parse_mode=ParseMode.MARKDOWN
        )


async def withdrawal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /withdrawal command for managers."""
    username = update.effective_user.username
    user_id_telegram = update.effective_user.id
    
    # Log the command attempt
    logger.info(f"Withdrawal command attempted by user: {username} (ID: {user_id_telegram})")
    
    if not username:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "üí° –ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            "2. –ù–∞–∂–º–∏—Ç–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n"
            "3. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return
    
    if not is_manager(username=username, user_id=user_id_telegram):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."
        )
        return
    
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "**–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
            "`/withdrawal <user_id> <code>`\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "`/withdrawal 123456 1234` - –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456 —Å –∫–æ–¥–æ–º 1234\n"
            "`/withdrawal 789012 5678` - –≤—ã–≤–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 789012 —Å –∫–æ–¥–æ–º 5678\n\n"
            "**–ß—Ç–æ –Ω—É–∂–Ω–æ:**\n"
            "‚Ä¢ user_id - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ 1win\n"
            "‚Ä¢ code - 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            "**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥:**\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ 1win –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        user_id = int(context.args[0])
        code = int(context.args[1])
        
        if code < 0:
            await update.message.reply_text(
                "‚ùå –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Å–Ω–æ–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/withdrawal 123456 1234`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
            
        if len(str(code)) != 4:
            await update.message.reply_text(
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–¥ –æ–±—ã—á–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 4 —Ü–∏—Ñ—Ä.\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–¥ –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
                f"–í–∞—à –∫–æ–¥: `{code}`\n\n"
                "–ï—Å–ª–∏ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                parse_mode=ParseMode.MARKDOWN
            )
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!\n\n"
            "**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:**\n"
            "‚Ä¢ user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456)\n"
            "‚Ä¢ code –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234)\n\n"
            "**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä:**\n"
            "`/withdrawal 123456 1234`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    # Show processing message
    processing_msg = await update.message.reply_text(
        f"‚è≥ **–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤—ã–≤–æ–¥...**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
        f"üîê –ö–æ–¥: `{code}`\n"
        f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ 1win...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # Log the API call attempt
    logger.info(f"Making API call for withdrawal: user_id={user_id}, code={code}")
    
    # Make API call
    try:
        client = WinAPIClient(API_KEY)
        result = await client.process_withdrawal(user_id, code)
        
        # Update message with result
        await processing_msg.edit_text(result["message"], parse_mode=ParseMode.MARKDOWN)
        
        # Log the transaction
        logger.info(f"Withdrawal request by {username}: user_id={user_id}, code={code}, success={result['success']}")
        
    except Exception as e:
        logger.error(f"Error in withdrawal command: {e}")
        await processing_msg.edit_text(
            f"‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞**\n\n"
            f"**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            f"`{str(e)}`\n\n"
            f"üí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ 1win\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É\n"
            f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è",
            parse_mode=ParseMode.MARKDOWN
        )


 
